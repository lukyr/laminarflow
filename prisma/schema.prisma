// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkId      String          @unique
  email        String          @unique
  firstName    String          @unique
  lastName     String          @unique
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  subscription Subscription?
  automations  Automation[]
  integrations Instegrations[]
}

model Subscription {
  id         String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  User       User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String            @unique @db.Uuid
  plan       SUBSCRIPTION_PLAN @default(FREE)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  customerId String?           @unique
}

model Instegrations {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        INTEGRATIONS @default(INSTAGRAM)
  userId      String?      @db.Uuid
  token       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  expiresAt   DateTime?
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  instagramId String?      @unique
}

model Automation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @default("Unititled")
  active    Boolean   @default(false)
  userId    String?   @db.Uuid
  trigger   Trigger[]
  listener  Listener?
  posts     Post[]
  dms       Dms[]
  keywords  Keyword[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trigger {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Listener {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  listener     LISTENERS   @default(MESSAGE)
  prompt       String
  commentReply String?
  dmCount      Int         @default(0)
  commentCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String      @unique @db.Uuid
}

model Post {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId       String      @unique
  caption      String?
  media        String
  mediaType    NEDIATYPE   @default(IMAGE)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Dms {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  senderId     String?
  receiver     String?
  message      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid
}

model Keyword {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  word         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Automation   Automation? @relation(fields: [automationId], references: [id], onDelete: Cascade)
  automationId String?     @db.Uuid

  @@unique([automationId, word]) // this constraint ensures that each automation has unique keywords
}

enum SUBSCRIPTION_PLAN {
  PRO
  FREE
}

enum INTEGRATIONS {
  INSTAGRAM
  FACEBOOK
  TIKTOK
}

enum NEDIATYPE {
  IMAGE
  VIDEO
  COROSEL_ALBUM
}

enum LISTENERS {
  SMARTAI
  MESSAGE
}
